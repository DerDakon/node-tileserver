--- /home/alexander/Desktop/kothic.js
+++ /home/alexander/Projekte/OpenRailwayMap/orm-latest/js/kothic.js
@@ -1,8 +1,28 @@
 /*
- (c) 2013, Darafei Praliaskouski, Vladimir Agafonkin, Maksim Gurtovenko
- Kothic JS is a full-featured JavaScript map rendering engine using HTML5 Canvas.
- http://github.com/kothic/kothic-js
+Copyright (c) 2011-2013, Darafei Praliaskouski, Vladimir Agafonkin, Maksim Gurtovenko
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are
+permitted provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice, this list of
+      conditions and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice, this list
+      of conditions and the following disclaimer in the documentation and/or other materials
+	  provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
+TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
+
 
 var Kothic = {
 
@@ -35,7 +55,7 @@
             ws = width / granularity, hs = height / granularity,
             collisionBuffer = new Kothic.CollisionBuffer(height, width);
 
-        console.time('styles');
+        //console.time('styles');
 
         // setup layer styles
         var layers = Kothic.style.populateLayers(data.features, zoom, styles),
@@ -44,10 +64,10 @@
         // render the map
         Kothic.style.setStyles(ctx, Kothic.style.defaultCanvasStyles);
 
-        console.timeEnd('styles');
+        //console.timeEnd('styles');
 
         Kothic.getFrame(function () {
-            console.time('geometry');
+            //console.time('geometry');
 
             Kothic._renderBackground(ctx, width, height, zoom, styles);
             Kothic._renderGeometryFeatures(layerIds, layers, ctx, ws, hs, granularity);
@@ -56,12 +76,12 @@
                 options.onRenderComplete();
             }
 
-            console.timeEnd('geometry');
+            //console.timeEnd('geometry');
 
             Kothic.getFrame(function () {
-                console.time('text/icons');
+                //console.time('text/icons');
                 Kothic._renderTextAndIcons(layerIds, layers, ctx, ws, hs, collisionBuffer);
-                console.timeEnd('text/icons');
+                //console.timeEnd('text/icons');
 
                 //Kothic._renderCollisions(ctx, collisionBuffer.buffer.data);
             });
@@ -166,8 +186,10 @@
         layerIds = ['_bg'].concat(layerIds);
 
         for (i = 0; i < layerIds.length; i++) {
-            queue = layersToRender[layerIds[i]];
-
+			// begin modified by rurseekatze
+            //queue = layersToRender[layerIds[i]];
+            queue = layersToRender[layerIds[i]] = layersToRender[layerIds[i]] || {};
+			// end modified by rurseekatze
             if (queue.polygons) {
                 for (j = 0, len = queue.polygons.length; j < len; j++) {
                     Kothic.polygon.render(ctx, queue.polygons[j], queue.polygons[j + 1], ws, hs, granularity);
